{"version":3,"sources":["webpack:///src/app/pages/login-page/components/login-form/login-form.component.ts","webpack:///src/app/pages/login-page/components/login-form/login-form.component.html","webpack:///src/app/pages/login-page/login-page-routing.module.ts","webpack:///src/app/pages/login-page/login-page.component.ts","webpack:///src/app/pages/login-page/login-page.component.html","webpack:///src/app/pages/login-page/login-page.module.ts","webpack:///src/app/pages/login-page/logout.component.ts"],"names":["LoginFormComponent","authenticationService","router","submitted","focusedInput","loading","emailStatus","passwordStatus","error","login","value","form","user","password","email","subscribe","res","console","log","localStorage","setItem","token","navigateByUrl","id","err","errMessage","message","selector","templateUrl","styleUrls","routes","path","component","LoginPageRoutingModule","forChild","imports","exports","LoginPageComponent","auth","route","nav","authErrors","username","pipe","redirectOnAuth","bind","navigate","returnUrl","snapshot","queryParams","LoginPageModule","declarations","LogoutComponent","logout","template"],"mappings":"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","file":"pages-login-page-login-page-module-es5.js","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { User } from 'src/app/models/user';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss'],\n})\nexport class LoginFormComponent {\n\n  constructor(\n    private authenticationService: AuthenticationService,\n    private router: Router\n  ) {}\n  submitted = false;\n  focusedInput = '';\n  loading = false;\n  email: string;\n  password: string;\n  user: any;\n  emailStatus = true;\n  passwordStatus = true;\n  error = false;\n  errMessage: string;\n\n  @Output() login = new EventEmitter<any>();\n  getInputValue(value: string) {}\n\n  /**\n   * Trigger a login event when submitting the form\n   */\n  onSubmit(form: NgForm) {\n    this.error = false;\n    this.loading = true;\n    const user = {\n      password: this.password,\n      email: this.email,\n    };\n\n    this.authenticationService.login(user).subscribe(\n      (res: any) => {\n        console.log(res);\n        localStorage.setItem('token', res.token);\n        this.router.navigateByUrl(\n          'dashboardPage/' + res.id + '/searchRecipe/' + res.id\n        );\n      },\n      (err) => {\n        this.error = true;\n        this.errMessage = err.error.message;\n        this.loading = false;\n      }\n    );\n  }\n}\n","<form\n  *ngIf=\"!this.loading\"\n  class=\"form\"\n  [class.submitted]=\"submitted\"\n  (submit)=\"onSubmit(loginForm)\"\n  #loginForm=\"ngForm\"\n>\n  <div class=\"loading\" *ngIf=\"loading\"></div>\n  <app-logo class=\"d-flex justify-content-center\" type=\"form\"></app-logo>\n  <app-simple-input\n    (getInput)=\"this.email = $event\"\n    label=\"Email\"\n    type=\"email\"\n    placeholder=\"Email\"\n    icon=\"email\"\n    pattern=\"^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$\"\n    required=\"true\"\n    name=\"email\"\n    (getInputStatus)=\"this.emailStatus = $event\"\n  >\n  </app-simple-input>\n  <app-simple-input\n    (getInput)=\"this.password = $event\"\n    label=\"Password\"\n    type=\"password\"\n    placeholder=\"Password\"\n    icon=\"Password\"\n    name=\"password\"\n    required=\"true\"\n    (getInputStatus)=\"this.passwordStatus = $event\"\n  >\n  </app-simple-input>\n  <app-error-message\n    *ngIf=\"this.error\"\n    [message]=\"this.errMessage\"\n  ></app-error-message>\n  <div class=\"btn-group\">\n    <button\n      type=\"submit\"\n      class=\"btn primary\"\n      [disabled]=\"this.emailStatus || this.passwordStatus\"\n    >\n      LOGIN\n    </button>\n  </div>\n</form>\n<div *ngIf=\"!this.loading\" class=\"d-flex justify-content-between\">\n  <div class=\"register\" [routerLink]=\"['/register']\">\n    You don't have an Account, Register!\n  </div>\n  <div class=\"register\" [routerLink]=\"['/forgotPassword']\">\n    Forgot Password\n  </div>\n</div>\n<!--end .form-->\n<app-loading-spinner *ngIf=\"this.loading\"></app-loading-spinner>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPageComponent } from './login-page.component';\nimport { LogoutComponent } from './logout.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginPageComponent },\n  { path: 'logout', component: LogoutComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginPageRoutingModule { }\n","import { Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { first, catchError, withLatestFrom, flatMap } from 'rxjs/operators';\n\nimport { AuthService } from '../../services/auth.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { forkJoin } from 'rxjs';\n\n@Component({\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss']\n})\nexport class LoginPageComponent {\n  public authErrors = null;\n\n  constructor(\n    private auth: AuthService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private nav: NavigationService,\n  ) {}\n\n  get returnUrl() {\n    return this.route.snapshot.queryParams.returnUrl;\n  }\n\n  /**\n   * Authenticate user\n   * @param param0 Username & password\n   */\n  login([username, password] = [] as Array<string>) {\n    this.auth.login(username, password)\n      .pipe(first())\n\n      .pipe(catchError(error => (this.authErrors = error.error, [])))\n      .pipe(flatMap(() => this.nav.routes))\n      .subscribe(this.redirectOnAuth.bind(this));\n  }\n\n  /**\n   * On a successful auth event, redirect user either to homepage or returnUrl\n   * ?: move the redirect based on user role (eg. on `Contacts` page for admin) to the dashboard page?\n   * @param path Path to redirect\n   */\n  redirectOnAuth(routes?: any) {\n    this.router.navigate([this.returnUrl || (routes && `/dashboard/${routes[0].path}`) || '/']);\n  }\n}\n","<div class=\"login-content\">\n  <app-login class=\"loginForm\"></app-login>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { LoginPageRoutingModule } from './login-page-routing.module';\nimport { LoginPageComponent } from './login-page.component';\nimport { LogoutComponent } from './logout.component';\n\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { InputsModule } from 'src/app/components/inputs/inputs.module';\nimport { ComponentsModule } from 'src/app/components/components.module';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { ConfirmUserComponent } from './confirm-user/confirm-user.component';\n\n@NgModule({\n  declarations: [LoginPageComponent, LogoutComponent, LoginFormComponent, ForgotPasswordComponent, ResetPasswordComponent, ConfirmUserComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    LoginPageRoutingModule,\n    InputsModule,\n    ComponentsModule,\n  ],\n})\nexport class LoginPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '../../services/auth.service';\n\n@Component({template: ''})\nexport class LogoutComponent implements OnInit {\n\n  constructor(\n    private auth: AuthService,\n    private router: Router,\n  ) { }\n\n  ngOnInit() {\n    this.auth.logout();\n    this.router.navigate(['login']);\n  }\n}\n"]}